[build-system]
requires = ["poetry-core^1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "tianshou"
version = "0.5.1"
description = "A Library for Deep Reinforcement Learning"
authors = ["TSAIL <trinkle23897@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/thu-ml/tianshou"
classifiers = [
    #   3 - Alpha
    #   4 - Beta
    #   5 - Production/Stable
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
exclude = ["test/*", "examples/*", "docs/*"]

[tool.poetry.dependencies]
python = "^3.9"
gymnasium = "^0.29.0"
h5py = "^3.9.0"
numba = "^0.57.1"
numpy = "^1"
packaging = "*"
pettingzoo = "^1.22"
tensorboard = "^2.5.0"
# Torch 2.0.1 causes problems, see https://github.com/pytorch/pytorch/issues/100974
torch = "^2.0.0, !=2.0.1"
tqdm = "*"

# TODO: add versions
atari_py = {version = "*", optional = true}
envpool = {version = "^0.8.2", optional = true}
mujoco_py = {version = "*", optional = true}
opencv_python = {version = "*", optional = true}
pybullet = {version = "*", optional = true}

[tool.poetry.extras]
atari = ["atari_py", "opencv-python"]
mujoco = ["mujoco_py"]
pybullet = ["pybullet"]
envpool = ["envpool"]


[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
black = "^23.7.0"
# gym used in compatibility test. TODO: drop this and test in future?
gym = "^0.22.0"
jinja2 = "*"
mypy = "^1.4.1"
# networkx is used in a test
networkx = "*"
# nni used in a 3rd party test
# TODO: this test is currently not even executed, is it worth the dependency?
nni = ">=2.3,<3.0"
poethepoet = "^0.20.0"
pre-commit = "^3.3.3"
pygame = "^2.1.0"
pymunk = "^6.2.1"
pytest = "*"
pytest-cov = "*"
# lightning used in a 3rd party test
# TODO: see above, worth the dependency?
pytorch-lightning = "^2.0.7"
# optional import for parallelization. Without installing it, the corresponding modules are not parsed by linters
# TODO: include ray in extras?
ray = "^1"
ruff = "^0.0.285"
scipy = "*"
shimmy = "*"
sphinx = "<7"
sphinx_rtd_theme = "*"
sphinxcontrib-bibtex = "*"
sphinxcontrib-spelling = "^8.0.0"
wandb = "^0.12.0"

[tool.mypy]
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
exclude = "^build/|^docs/|^test/|^examples/"

[tool.doc8]
max-line-length = 1000

[tool.black]
line-length = 100
target-version = ['py39']

[tool.ruff]
select = [
    "ASYNC", "B", "C4", "C90", "COM", "D", "DTZ", "E", "F", "FLY", "G", "I", "ISC", "PIE", "PLC", "PLE", "PLW", "RET", "RUF", "RSE", "SIM", "TID", "UP", "W", "YTT",
]
ignore = [
    "SIM118", # Needed b/c iter(batch) != iter(batch.keys()). See https://github.com/thu-ml/tianshou/issues/922
    "E501",   # line too long. black does a good enough job
    "E741",   # variable names like "l". this isn't a huge problem
    "B008",   # do not perform function calls in argument defaults. we do this sometimes
    "B011",   # assert false. we don't use python -O
    "B028",   # we don't need explicit stacklevel for warnings
    "D100", "D101", "D102", "D104", "D105", "D107", "D203", "D213", "D401", "D402",  # docstring stuff
    "DTZ005",  # we don't need that
    # remaining rules from https://github.com/psf/black/blob/main/.flake8 (except W503)
    # this is a simplified version of config, making vscode plugin happy
    "E402", "E501", "E701", "E731", "C408", "E203"
]
unfixable = [
    "F841",  # unused variable. ruff keeps the call, but mostly we want to get rid of it all
    "F601",  # automatic fix might obscure issue
    "F602",  # automatic fix might obscure issue
    "B018",  # automatic fix might obscure issue
]
extend-fixable = [
    "F401",  # unused import
]

target-version = "py39"

[tool.ruff.mccabe]
max-complexity = 20

[tool.ruff.per-file-ignores]
"test/**" = ["D103"]
"docs/**" = ["D103"]
"examples/**" = ["D103"]


[tool.poetry_bumpversion.file."tianshou/__init__.py"]

[tool.poetry-sort]
move-optionals-to-bottom = true

# keep relevant parts in sync with pre-commit
[tool.poe.tasks]  # https://github.com/nat-n/poethepoet
  [tool.poe.tasks.lint]
  help = "Lint with ruff and black"

    [[tool.poe.tasks.lint.sequence]]
    cmd = """ruff check ."""
    [[tool.poe.tasks.lint.sequence]]
    cmd = """black --check ."""

  [tool.poe.tasks.format]
  help = "Format with poetry-sort, ruff, and black"

    [[tool.poe.tasks.format.sequence]]
    cmd = """poetry self add poetry-plugin-sort"""
    [[tool.poe.tasks.format.sequence]]
    cmd = """poetry sort"""
    [[tool.poe.tasks.format.sequence]]
    cmd = """black ."""
    [[tool.poe.tasks.format.sequence]]
    cmd = """ruff --fix ."""

  [tool.poe.tasks.test]
  help = "Test with pytest and coverage"

    [[tool.poe.tasks.test.sequence]]
    # TODO: remove 3rd party tests and nni? See todo above
    cmd = "pytest test  --ignore-glob='*profile.py' --ignore='test/3rd_party' --cov=tianshou --cov-report=xml --cov-report=term-missing --durations=0 -v --color=yes"

  [tool.poe.tasks.doc-clean]
  help = "Clean docs/_build"
    [[tool.poe.tasks.doc-clean.sequence]]
    cmd = 'rm -rf docs/_build'

  [tool.poe.tasks.doc-build]
    help = "Build docs"
        [[tool.poe.tasks.doc-build.sequence]]
        cmd = 'sphinx-build -b spelling docs docs/_build'
        [[tool.poe.tasks.doc-build.sequence]]
        cmd = 'sphinx-build -b html docs docs/_build'


  [tool.poe.tasks.type-check]
    help = "Check types"
       [[tool.poe.tasks.type-check.sequence]]
        cmd = "mypy tianshou"

